/* 의문증 2가지 정리

1. up() & down() 메서드에서 return을 작성하지 않은 이유
  a. 메서드의 목적
  : up() 메서드의 주된 기능은 ladder의 객체의 step 프로퍼티를 증가시키는 것.
    이 메서드의 핵심 목표는 단순히 상태를 변경하는 것이며, 변경된 값을 반환하는 것이 주 목적이 아니기 때문.
  b. 편의성과 명확성
  : 메서드에서 값을 반환하면 해당 메서드를 호출하는 쪽에서 반환된 값을 활용할 수 있기는 하지만,
    이 경우에는 step의 새로운 값, 본인 자체를 얻기 위해 메서드를 사용하려는 것이 아니라 그저 증가만 시키기 위한 목적이 강함
    따라서 return을 생략함으로써 메서드의 의도를 더 분명히 표현

2. 반면, showStep에서 function() 키워드를 추가 작성한 이유
  a. 함수 표현 형태의 선택
  : `function() {...}` 가장 기본적인 함수 선언 방식
    그리고 해당 방식은 `this`의 바인딩이 해당 함수가 호출된 컨텍스트에 따라 결정되는 특성을 갖음
  2. 일광성 유지
  : 객체 안에서 메서드 선언 시, 기준이 되는 동일한(전통적인) 형식으로 유지하면 코드의 가독성 및 유지 보수성 향상

✅ 결론 
- up() 메서드에서 `return`을 사용하지 않는 것은 메서드의 주된 기능이 상태 변환임을 명확히 하고, 반환값을 통해 추가적인 처리를 기대하지 않기 때문
- `showStep` 메서드에서 `function()`을 사용하는 것은 메서드 선언의 전통적인 방식을 따르고, 코드 일관성 유지 위함.
  또 이런 방식은 `this` 바인딩에 있어 예상되는 동작 보장!

*/

let ladder = {
  step: 0,
  up() {
    this.step++;
  },
  down() {
    this.step--;
  },
  showStep: function () {
    alert(this.step);
  },
};

export default ladder;
